
function resolveDate (day,start,end) {
	var startHour = parseInt(start.hour);
	var endHour = parseInt(end.hour);

	//probably fine for now, determines true time
	if (endHour > startHour) //if both same 'AM/PM'
	{
		if (startHour < 6)
		{
			startHour += 12;
			endHour += 12;
		}
	}
	else
	{
		endHour += 12;
	}

	var dayLookup = {"SUN":0,"MON":1,"TUES":2,"WED":3,"THURS":4,"FRI":5,"SAT":6};
	var today = new Date(Date.now());
	var startStamp = new Date();
	var endStamp = new Date();

	//ONLY need to worry about timezones when deciding if truck is open/closed based on its location
	//opening hours are truck-specific so they follow the truck to whatever timezone it's in,
	// but they don't need to be corrected for

	today.setHours(6,0); //6am
	
	startStamp.setHours(startHour,parseInt(start.minute),0,0);
	endStamp.setHours(endHour,parseInt(end.minute),0,0);
  
	//check from yesterday to avoid time inconsistency worries
	var dayNum = (today.getDay()+6)%7;
	var date = today.getDate()+(dayLookup[day]-today.getDay());
	if (dayLookup[day] < (dayNum))
	{
		date += 7;
	}
	startStamp.setDate(date);
	endStamp.setDate(date);
	return [startStamp, endStamp];
}

module.exports = {
	read: function(tweet) {
		var reg = new RegExp(/^(\w*)\s+((?:\s*[^\s\n]*)*?)\s*?((?:[A-Za-z_\.]+?\s*?)*)\s+?(\w+?\/\w+|\d+(?:\s*?[A-Za-z\.][a-z\.]*?)*)(?:\s+[#@A-Za-z]*)*(?:(\d{5})?)\s*((?:\s*?[A-Za-z]+)*).*?OPEN\s*?([0-9]{1,2}):?([0-9:]{2})-([0-9]{1,2}):?([0-9]{2}).*?$/);
		var matches = tweet.match(reg);
		var startinfo = {hour: matches[7],minute: matches[8]};
		var endinfo = {hour: matches[9], minute: matches[10]};
		var stamp = resolveDate(matches[1],startinfo,endinfo);
	    var outData = {
			"address": matches[4],
			"zip": matches[5],
			//"addressnotes": matches[3],
			//"tags": matches[2],
			"notes": matches[6], //additional notes about truck location (eg: "behind building")
			//times
			// "open": stamp[0].toString(),
			// "close": stamp[1].toString()
			"open": stamp[0].getTime(),
			"close": stamp[1].getTime()
		};
		return outData;
	}
};
